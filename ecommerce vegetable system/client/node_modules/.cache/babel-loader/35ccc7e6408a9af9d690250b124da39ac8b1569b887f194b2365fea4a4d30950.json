{"ast":null,"code":"export const addItem = (item = [], count = 0, next = f => f) => {\n  let cart = [];\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n    cart.push({\n      ...item,\n      count: 1\n    });\n\n    // remove duplicates\n    // build an Array from new Set and turn it back into array using Array.from\n    // so that later we can re-map it\n    // new set will only allow unique values in it\n    // so pass the ids of each object/product\n    // If the loop tries to add the same value again, it'll get ignored\n    // ...with the array of ids we got on when first map() was used\n    // run map() on it again and return the actual product from the cart\n\n    cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n      return cart.find(p => p._id === id);\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n    next();\n  }\n};\nexport const itemTotal = () => {\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      return JSON.parse(localStorage.getItem('cart')).length;\n    }\n  }\n  return 0;\n};\nexport const getCart = () => {\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      return JSON.parse(localStorage.getItem('cart'));\n    }\n  }\n  return [];\n};\nexport const updateItem = (productId, count) => {\n  let cart = [];\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        cart[i].count = count;\n      }\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }\n};\nexport const removeItem = productId => {\n  let cart = [];\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        cart.splice(i, 1);\n      }\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }\n  return cart;\n};\nexport const emptyCart = next => {\n  if (typeof window !== 'undefined') {\n    localStorage.removeItem('cart');\n    next();\n  }\n};","map":{"version":3,"names":["addItem","item","count","next","f","cart","window","localStorage","getItem","JSON","parse","push","Array","from","Set","map","p","_id","id","find","setItem","stringify","itemTotal","length","getCart","updateItem","productId","product","i","removeItem","splice","emptyCart"],"sources":["C:/mern-ecommerce-master/mern-ecommerce-master/client/src/core/cartHelpers.js"],"sourcesContent":["export const addItem = (item = [], count = 0, next = (f) => f) => {\r\n  let cart = [];\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      cart = JSON.parse(localStorage.getItem('cart'));\r\n    }\r\n    cart.push({\r\n      ...item,\r\n      count: 1,\r\n    });\r\n\r\n    // remove duplicates\r\n    // build an Array from new Set and turn it back into array using Array.from\r\n    // so that later we can re-map it\r\n    // new set will only allow unique values in it\r\n    // so pass the ids of each object/product\r\n    // If the loop tries to add the same value again, it'll get ignored\r\n    // ...with the array of ids we got on when first map() was used\r\n    // run map() on it again and return the actual product from the cart\r\n\r\n    cart = Array.from(new Set(cart.map((p) => p._id))).map((id) => {\r\n      return cart.find((p) => p._id === id);\r\n    });\r\n\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n    next();\r\n  }\r\n};\r\n\r\nexport const itemTotal = () => {\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      return JSON.parse(localStorage.getItem('cart')).length;\r\n    }\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport const getCart = () => {\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      return JSON.parse(localStorage.getItem('cart'));\r\n    }\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const updateItem = (productId, count) => {\r\n  let cart = [];\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      cart = JSON.parse(localStorage.getItem('cart'));\r\n    }\r\n\r\n    cart.map((product, i) => {\r\n      if (product._id === productId) {\r\n        cart[i].count = count;\r\n      }\r\n    });\r\n\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n  }\r\n};\r\n\r\nexport const removeItem = (productId) => {\r\n  let cart = [];\r\n  if (typeof window !== 'undefined') {\r\n    if (localStorage.getItem('cart')) {\r\n      cart = JSON.parse(localStorage.getItem('cart'));\r\n    }\r\n\r\n    cart.map((product, i) => {\r\n      if (product._id === productId) {\r\n        cart.splice(i, 1);\r\n      }\r\n    });\r\n\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n  }\r\n  return cart;\r\n};\r\n\r\nexport const emptyCart = (next) => {\r\n  if (typeof window !== 'undefined') {\r\n    localStorage.removeItem('cart');\r\n    next();\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}